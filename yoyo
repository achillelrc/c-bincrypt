#include <unistd.h>
#include <stdio.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <dirent.h>

int	fsize(char *file)
{
  struct stat	stats;

  if (stat(file, &stats) == 0)
    return (stats.st_size);
  return (0);
}

int	isdir(char *path) {
    struct stat stats;

    if (stat(path, &stats) != 0)
        return (0);
    return (S_ISDIR(stats.st_mode));
}

int getchmod(char *fil) {
    int oct;
    struct stat stats;

    stat(fil, &stats);
    oct = stats.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO);
    return (oct);
}

int copyx(char *input, char *output)
{
    int c;
    int i;
    long long sz = fsize(input);
    FILE *inp = fopen(input, "r");
    FILE *out = fopen(output, "a");

    if (!inp || !out) {
        fclose(inp);
        fclose(out);
        return (0);
    }
    while ((c = fgetc(inp)) != EOF && i < sz) {
        printf("%d:%c\n", c, c);
        fputc(c, out);
        i++;
    }
    fclose(out);
    fclose(inp);
    return (fsize(input));
}

int copyxx(char *input, char *output, long long dec)
{
    int c;
    int i;
    long long sz = fsize(input);
    FILE *inp = fopen(input, "r");
    FILE *out = fopen(output, "a");

    if (!inp || !out) {
        fclose(inp);
        fclose(out);
        return (0);
    }
    while ((c = fgetc(inp)) != EOF && i < sz) {
        printf("%d", c);
        char comp = c + dec;
        fputc((int)comp, out);
        i++;
    }
    fclose(out);
    fclose(inp);
    return (fsize(input));
}

int launch(char *output, char *file, long long key)
{
    int perms;
    FILE *try = fopen(file, "r");;

    if (!try || isdir(file) != 0) {
        printf("Cannot open %s try sudo\n", file);
        return (0);
    }
    perms = getchmod(file);
    if (!copyxx(file, output, key)) {
        printf("Error copying sorry\n");
        return (0);
    }
    if (chmod(output, perms) == -1) {
        printf("Cannot apply permission try sudo\n");
        return (0);
    }
    return (42);
}

int main(int ac, char **av) {
    if (ac < 3 || ac > 4) {
        printf("Usage: %s file output\n\n", av[0]);
        return (-1);
    }
    if ((ac == 4 && !launch(av[2], av[1], atoll(av[3]))) || !launch(av[2], av[1], 0))
        return (-1);
    return (0);
}
